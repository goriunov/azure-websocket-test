// Generated by dts-bundle v0.7.3

export class EventEmitter {
    on(event: string, listener: Listener): void;
    emit(event: string, ...args: any[]): void;
    removeEvents(): void;
}

export type Listener = (...args: any[]) => void;
export type SocketAddress = {
    remotePort: number | string | null;
    remoteAddress: string | null;
    remoteFamily: string | null;
};
export type ConnectionInfo = {
    req: any;
    origin: string;
    secure: boolean;
};
export type BroadcastOptions = {
    binary?: boolean;
};
export type ServerConfigs = {
    path?: string;
    port?: number;
    host?: string;
    server?: any;
    noDelay?: boolean;
    maxPayload?: number;
    perMessageDeflate?: {
        serverNoContextTakeover: boolean;
    };
    verifyClient?: (info: ConnectionInfo, next: Listener) => void;
};
export type SendOptions = {
    binary?: boolean;
    compress?: boolean;
};

export class WebSocket extends EventEmitter {
    OPEN: number;
    CLOSED: number;
    isAlive: boolean;
    external: any;
    executeOn: string;
    constructor(url: string, external?: any, isServer?: boolean);
    readonly _socket: SocketAddress;
    readonly readyState: number;
    ping(message?: string | Buffer): void;
    send(message: string | Buffer, options?: SendOptions, cb?: Listener): void;
    terminate(): void;
    close(code: number, reason: string): void;
}

export class WebSocketServer extends EventEmitter {
    constructor(configs: ServerConfigs, callback?: Listener);
    broadcast(message: string | Buffer, options: BroadcastOptions): void;
    startAutoPing(interval: number, appLevel?: boolean): void;
}

export const native: any;
export const OPCODE_TEXT: number;
export const OPCODE_PING: number;
export const OPCODE_BINARY: number;
export const APP_PONG_CODE: number;
export const APP_PING_CODE: Buffer;
export const PERMESSAGE_DEFLATE: number;
export const SLIDING_DEFLATE_WINDOW: number;
export const DEFAULT_PAYLOAD_LIMIT: number;
export const noop: any;

